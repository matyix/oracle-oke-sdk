// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClustersapiCluster Cluster details.
// swagger:model clustersapiCluster
type ClustersapiCluster struct {

	// Credential set ID.
	AuthConfigID string `json:"authConfigId,omitempty"`

	// The available Kubernetes versions the master can be upgraded to.
	AvailableK8SUpgrade []string `json:"availableK8SUpgrade"`

	// bmc cluster config
	BmcClusterConfig *ClustersapiBmcClusterConfig `json:"bmcClusterConfig,omitempty"`

	// cloud details
	CloudDetails *ClustersapiCloudDetails `json:"cloudDetails,omitempty"`

	// The cloud infrastructure type.
	CloudType string `json:"cloudType,omitempty"`

	// The desired state.
	DesiredState string `json:"desiredState,omitempty"`

	// endpoints
	Endpoints *ClustersapiEndpoints `json:"endpoints,omitempty"`

	// Error message.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The cluster ID.
	ID string `json:"id,omitempty"`

	// Kubernetes version.
	K8Version string `json:"k8Version,omitempty"`

	// The state of the master(s).
	MastersState string `json:"mastersState,omitempty"`

	// Cluster metadata.
	Metadata *ClustersapiMetadata `json:"metadata,omitempty"`

	// The name of the cluster.
	Name string `json:"name,omitempty"`

	// The state of the nodes.
	NodesState string `json:"nodesState,omitempty"`

	// Cluster owner name.
	OwnerName string `json:"ownerName,omitempty"`

	// Wercker organization ID.
	ResourceOwnerID string `json:"resourceOwnerId,omitempty"`

	// state details
	StateDetails *ClustersapiStateDetails `json:"stateDetails,omitempty"`

	// Tenant ID.
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this clustersapi cluster
func (m *ClustersapiCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableK8SUpgrade(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBmcClusterConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCloudDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndpoints(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStateDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustersapiCluster) validateAvailableK8SUpgrade(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailableK8SUpgrade) { // not required
		return nil
	}

	return nil
}

func (m *ClustersapiCluster) validateBmcClusterConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.BmcClusterConfig) { // not required
		return nil
	}

	if m.BmcClusterConfig != nil {

		if err := m.BmcClusterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bmcClusterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClustersapiCluster) validateCloudDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudDetails) { // not required
		return nil
	}

	if m.CloudDetails != nil {

		if err := m.CloudDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ClustersapiCluster) validateEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	if m.Endpoints != nil {

		if err := m.Endpoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoints")
			}
			return err
		}
	}

	return nil
}

func (m *ClustersapiCluster) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {

		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ClustersapiCluster) validateStateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.StateDetails) { // not required
		return nil
	}

	if m.StateDetails != nil {

		if err := m.StateDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stateDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClustersapiCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustersapiCluster) UnmarshalBinary(b []byte) error {
	var res ClustersapiCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
