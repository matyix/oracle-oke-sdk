// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClustersapiCreateRequest This object contains the information required to create a cluster.
// swagger:model clustersapiCreateRequest
type ClustersapiCreateRequest struct {

	// bmc cluster config
	BmcClusterConfig *ClustersapiBmcClusterConfig `json:"bmcClusterConfig,omitempty"`

	// Credential set ID.
	CloudAuthID string `json:"cloudAuthId,omitempty"`

	// The type of cloud service.
	CloudType string `json:"cloudType,omitempty"`

	// Kubernetes version.
	K8Version string `json:"k8Version,omitempty"`

	// The type of load balancer.
	LbType string `json:"lbType,omitempty"`

	// The name of the cluster to create.
	Name string `json:"name,omitempty"`

	// Wercker organization ID.
	OwnerID string `json:"ownerId,omitempty"`

	// The ID of the tenancy in which to create the cluster.
	TenantID string `json:"tenantId,omitempty"`

	// The Wercker ID of the person creating the cluster.
	WerckerID string `json:"werckerId,omitempty"`
}

// Validate validates this clustersapi create request
func (m *ClustersapiCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBmcClusterConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustersapiCreateRequest) validateBmcClusterConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.BmcClusterConfig) { // not required
		return nil
	}

	if m.BmcClusterConfig != nil {

		if err := m.BmcClusterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bmcClusterConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClustersapiCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustersapiCreateRequest) UnmarshalBinary(b []byte) error {
	var res ClustersapiCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
