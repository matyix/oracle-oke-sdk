// Code generated by go-swagger; DO NOT EDIT.

package manage_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteAuthConfigParams creates a new DeleteAuthConfigParams object
// with the default values initialized.
func NewDeleteAuthConfigParams() *DeleteAuthConfigParams {
	var ()
	return &DeleteAuthConfigParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteAuthConfigParamsWithTimeout creates a new DeleteAuthConfigParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteAuthConfigParamsWithTimeout(timeout time.Duration) *DeleteAuthConfigParams {
	var ()
	return &DeleteAuthConfigParams{

		timeout: timeout,
	}
}

// NewDeleteAuthConfigParamsWithContext creates a new DeleteAuthConfigParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteAuthConfigParamsWithContext(ctx context.Context) *DeleteAuthConfigParams {
	var ()
	return &DeleteAuthConfigParams{

		Context: ctx,
	}
}

// NewDeleteAuthConfigParamsWithHTTPClient creates a new DeleteAuthConfigParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteAuthConfigParamsWithHTTPClient(client *http.Client) *DeleteAuthConfigParams {
	var ()
	return &DeleteAuthConfigParams{
		HTTPClient: client,
	}
}

/*DeleteAuthConfigParams contains all the parameters to send to the API endpoint
for the delete auth config operation typically these are written to a http.Request
*/
type DeleteAuthConfigParams struct {

	/*ID
	  The ID of the credential set to delete.

	Example: 47b22a3ce0c4610100d47e94

	*/
	ID string
	/*OwnerID
	  Wercker organization ID.

	Example: 59bbf8affb1beb01009cae7a

	*/
	OwnerID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete auth config params
func (o *DeleteAuthConfigParams) WithTimeout(timeout time.Duration) *DeleteAuthConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete auth config params
func (o *DeleteAuthConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete auth config params
func (o *DeleteAuthConfigParams) WithContext(ctx context.Context) *DeleteAuthConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete auth config params
func (o *DeleteAuthConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete auth config params
func (o *DeleteAuthConfigParams) WithHTTPClient(client *http.Client) *DeleteAuthConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete auth config params
func (o *DeleteAuthConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the delete auth config params
func (o *DeleteAuthConfigParams) WithID(id string) *DeleteAuthConfigParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete auth config params
func (o *DeleteAuthConfigParams) SetID(id string) {
	o.ID = id
}

// WithOwnerID adds the ownerID to the delete auth config params
func (o *DeleteAuthConfigParams) WithOwnerID(ownerID string) *DeleteAuthConfigParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the delete auth config params
func (o *DeleteAuthConfigParams) SetOwnerID(ownerID string) {
	o.OwnerID = ownerID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteAuthConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param ownerId
	if err := r.SetPathParam("ownerId", o.OwnerID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
