// Code generated by go-swagger; DO NOT EDIT.

package manage_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/matyix/oracle-oke-client/models"
)

// NewGetNodeShapesParams creates a new GetNodeShapesParams object
// with the default values initialized.
func NewGetNodeShapesParams() *GetNodeShapesParams {
	var ()
	return &GetNodeShapesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNodeShapesParamsWithTimeout creates a new GetNodeShapesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNodeShapesParamsWithTimeout(timeout time.Duration) *GetNodeShapesParams {
	var ()
	return &GetNodeShapesParams{

		timeout: timeout,
	}
}

// NewGetNodeShapesParamsWithContext creates a new GetNodeShapesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNodeShapesParamsWithContext(ctx context.Context) *GetNodeShapesParams {
	var ()
	return &GetNodeShapesParams{

		Context: ctx,
	}
}

// NewGetNodeShapesParamsWithHTTPClient creates a new GetNodeShapesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNodeShapesParamsWithHTTPClient(client *http.Client) *GetNodeShapesParams {
	var ()
	return &GetNodeShapesParams{
		HTTPClient: client,
	}
}

/*GetNodeShapesParams contains all the parameters to send to the API endpoint
for the get node shapes operation typically these are written to a http.Request
*/
type GetNodeShapesParams struct {

	/*Body
	  Body parameters.

	*/
	Body *models.ClustersapiGetNodeShapesRequest
	/*OwnerID
	  Wercker organization ID.

	Example: 59bbf8affb1beb01009cae7a

	*/
	OwnerID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get node shapes params
func (o *GetNodeShapesParams) WithTimeout(timeout time.Duration) *GetNodeShapesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get node shapes params
func (o *GetNodeShapesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get node shapes params
func (o *GetNodeShapesParams) WithContext(ctx context.Context) *GetNodeShapesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get node shapes params
func (o *GetNodeShapesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get node shapes params
func (o *GetNodeShapesParams) WithHTTPClient(client *http.Client) *GetNodeShapesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get node shapes params
func (o *GetNodeShapesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the get node shapes params
func (o *GetNodeShapesParams) WithBody(body *models.ClustersapiGetNodeShapesRequest) *GetNodeShapesParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the get node shapes params
func (o *GetNodeShapesParams) SetBody(body *models.ClustersapiGetNodeShapesRequest) {
	o.Body = body
}

// WithOwnerID adds the ownerID to the get node shapes params
func (o *GetNodeShapesParams) WithOwnerID(ownerID string) *GetNodeShapesParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the get node shapes params
func (o *GetNodeShapesParams) SetOwnerID(ownerID string) {
	o.OwnerID = ownerID
}

// WriteToRequest writes these params to a swagger request
func (o *GetNodeShapesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param ownerId
	if err := r.SetPathParam("ownerId", o.OwnerID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
