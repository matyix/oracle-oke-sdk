// Code generated by go-swagger; DO NOT EDIT.

package manage_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new manage clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for manage clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Create creates a cluster

Use this endpoint to create a cluster for a given organization.
*/
func (a *Client) Create(params *CreateParams) (*CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create",
		Method:             "POST",
		PathPattern:        "/api/v3/clusters/{ownerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOK), nil

}

/*
CreateAuthConfig creates a credential set

Use this endpoint to create a named credential set for a given organization.
*/
func (a *Client) CreateAuthConfig(params *CreateAuthConfigParams) (*CreateAuthConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAuthConfig",
		Method:             "POST",
		PathPattern:        "/api/v3/clusters/{ownerId}/authConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAuthConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAuthConfigOK), nil

}

/*
DeleteAuthConfig deletes a credential set

Use this endpoint to delete a named credential set for a given organization.
*/
func (a *Client) DeleteAuthConfig(params *DeleteAuthConfigParams) (*DeleteAuthConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAuthConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v3/clusters/{ownerId}/authConfigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAuthConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAuthConfigOK), nil

}

/*
DeleteCluster deletes a cluster

Use this endpoint to delete a specific cluster for a given organization.
*/
func (a *Client) DeleteCluster(params *DeleteClusterParams) (*DeleteClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCluster",
		Method:             "DELETE",
		PathPattern:        "/api/v3/clusters/{ownerId}/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterOK), nil

}

/*
GetAuthConfig gets credential set details

Use this endpoint to get details of a named credential set for a given organization.
*/
func (a *Client) GetAuthConfig(params *GetAuthConfigParams) (*GetAuthConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAuthConfig",
		Method:             "GET",
		PathPattern:        "/api/v3/clusters/{ownerId}/authConfigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuthConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthConfigOK), nil

}

/*
GetBmcAds lists accessible availability domains

Use this endpoint to list Availability Domains for a given organization.
*/
func (a *Client) GetBmcAds(params *GetBmcAdsParams) (*GetBmcAdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBmcAdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBmcAds",
		Method:             "POST",
		PathPattern:        "/api/v3/clusters/{ownerId}/bmc/ads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBmcAdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBmcAdsOK), nil

}

/*
GetCluster lists details of a specific cluster

Use this endpoint to show details of specific cluster for a given organization.
*/
func (a *Client) GetCluster(params *GetClusterParams) (*GetClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCluster",
		Method:             "GET",
		PathPattern:        "/api/v3/clusters/{ownerId}/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterOK), nil

}

/*
GetK8SVersions gets available kubernetes versions

Use this endpoint to get a list of the Kubernetes versions available for a given organization's clusters.
*/
func (a *Client) GetK8SVersions(params *GetK8SVersionsParams) (*GetK8SVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetK8SVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetK8SVersions",
		Method:             "POST",
		PathPattern:        "/api/v3/clusters/{ownerId}/k8sVersions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetK8SVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetK8SVersionsOK), nil

}

/*
GetNodeImages gets available node images

Use this endpoint to get a list of the images available for a given organization's nodes.
*/
func (a *Client) GetNodeImages(params *GetNodeImagesParams) (*GetNodeImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNodeImages",
		Method:             "POST",
		PathPattern:        "/api/v3/clusters/{ownerId}/node/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodeImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeImagesOK), nil

}

/*
GetNodeShapes gets available node shapes

Use this endpoint to get a list of the shapes available for a given organization's nodes.
*/
func (a *Client) GetNodeShapes(params *GetNodeShapesParams) (*GetNodeShapesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeShapesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNodeShapes",
		Method:             "POST",
		PathPattern:        "/api/v3/clusters/{ownerId}/node/shapes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodeShapesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeShapesOK), nil

}

/*
GetRegion gets available regions

Use this endpoint to get a list of the regions available for a given organization's clusters.
*/
func (a *Client) GetRegion(params *GetRegionParams) (*GetRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRegion",
		Method:             "POST",
		PathPattern:        "/api/v3/clusters/{ownerId}/region",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionOK), nil

}

/*
GetVersion gets API version

Use this endpoint to get the version of the API.
*/
func (a *Client) GetVersion(params *GetVersionParams) (*GetVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVersion",
		Method:             "GET",
		PathPattern:        "/api/v3/clusters/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVersionOK), nil

}

/*
GetWorkItem lists work item details

Use this endpoint to show details of an operation (for example, a cluster creation operation) for a given organization.
*/
func (a *Client) GetWorkItem(params *GetWorkItemParams) (*GetWorkItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkItem",
		Method:             "GET",
		PathPattern:        "/api/v3/clusters/{ownerId}/workItems/{workItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWorkItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkItemOK), nil

}

/*
ListAuthConfigs lists credential sets

Use this endpoint to list the named credential sets available to a given organization.
*/
func (a *Client) ListAuthConfigs(params *ListAuthConfigsParams) (*ListAuthConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuthConfigsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAuthConfigs",
		Method:             "GET",
		PathPattern:        "/api/v3/clusters/{ownerId}/authConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAuthConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAuthConfigsOK), nil

}

/*
ListClusters lists all clusters

Use this endpoint to return a list of all clusters.
*/
func (a *Client) ListClusters(params *ListClustersParams) (*ListClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListClusters",
		Method:             "GET",
		PathPattern:        "/api/v3/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListClustersOK), nil

}

/*
ListClustersForOwner lists clusters by organization

Use this endpoint to return a list of clusters for a given organization.
*/
func (a *Client) ListClustersForOwner(params *ListClustersForOwnerParams) (*ListClustersForOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClustersForOwnerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListClustersForOwner",
		Method:             "GET",
		PathPattern:        "/api/v3/clusters/{ownerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListClustersForOwnerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListClustersForOwnerOK), nil

}

/*
UpdatePools updates pools

Use this endpoint to update the node pools in a given cluster.
*/
func (a *Client) UpdatePools(params *UpdatePoolsParams) (*UpdatePoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdatePools",
		Method:             "PUT",
		PathPattern:        "/api/v3/clusters/{ownerId}/{clusterId}/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePoolsOK), nil

}

/*
UpgradeK8SMaster upgrades kubernetes master

Use this endpoint to upgrade the Kubernetes master in a given cluster.
*/
func (a *Client) UpgradeK8SMaster(params *UpgradeK8SMasterParams) (*UpgradeK8SMasterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeK8SMasterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpgradeK8SMaster",
		Method:             "POST",
		PathPattern:        "/api/v3/clusters/{ownerId}/{clusterId}/upgradeK8SMaster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeK8SMasterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeK8SMasterOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
